;----Includes BEGIN

 INCLUDE stm32G0_constants.s
 INCLUDE core_cm0_plus_constants.s

;----Includes END
 AREA main,Code,READONLY
 EXPORT __main
 ENTRY
__main PROC
;USER CODE BEGIN 1


 BL RCC_CONFIG
 BL USART1_RX_Config
 BL USART1_RX_AF
 BL GPIOA12_Config

;USER CODE END 1
;While loop begin
loop
;USER CODE BEGIN 2
 BL UART_ReadChar
;USER CODE END 2
 B loop
 ENDP
UART_ReadChar PROC
		PUSH{LR}		
		LDR r0,=USART1_BASE
iloop	LDR r1,[r0,#USART_ISR]
		LDR r2, =USART_ISR_RXNE_RXFNE
		ANDS r1,r2
		CMP r1,#0x00
		BEQ iloop
		
lop		LDR r4,[r0, #USART_RDR]
		CMP r4,#0x59
		BEQ turn_on_led
		CMP r4,#0x4E
		BEQ turn_off_led
		B lop

turn_on_led 
	LDR r0,=GPIOA_BASE
	LDR r1, [r0, #GPIO_ODR]
	LDR r2, =(GPIO_ODR_OD12) ;1<<12
	ORRS r1, r1, r2 
	STR r1, [r0, #GPIO_ODR]
	POP{PC}
turn_off_led 
	LDR r0,=GPIOA_BASE
	LDR r1, [r0, #GPIO_ODR]
	LDR r2, =(GPIO_ODR_OD12) ;1<<12
	BICS r1, r1, r2; 
	STR r1, [r0, #GPIO_ODR]
	POP{PC}
	ENDP
	
RCC_CONFIG PROC
 PUSH{LR}
 LDR r0, =RCC_BASE
 LDR r1, [r0, #RCC_IOPENR]
 LDR r2, =RCC_IOPENR_GPIOBEN
 ORRS r1, r1, r2
 STR r1, [r0, #RCC_IOPENR]
 LDR r0,=RCC_BASE
 LDR r1,[r0, #RCC_APBENR2]
 LDR r2,=RCC_APBENR2_USART1EN
 ORRS r1,r1,r2
 STR r1, [r0,#RCC_APBENR2]
 LDR r0,=RCC_BASE
 LDR r1,[r0, #RCC_IOPENR]
 LDR r2,=RCC_IOPENR_GPIOAEN
 ORRS r1,r1,r2
 STR r1, [r0,#RCC_IOPENR]
 POP{PC}
 ENDP


USART1_RX_Config PROC
 PUSH{LR}
USART1_Baudrate_DIV          EQU 0x682
 LDR r0,=USART1_BASE
;Disabling USART
 LDR r1,[r0]
 LDR r2,=USART_CR1_UE
 BICS r1,r1,r2
 STR r1,[r0]
;Selecting Baud Rate
 LDR r1,[r0,#USART_BRR]
 LDR r2,=USART_BRR_BRR
 ORRS r1,r1,r2
 LDR r2,=USART1_Baudrate_DIV
 ANDS r1,r1,r2
 STR r1,[r0,#USART_BRR]
;Reception_Enable
 LDR r1,[r0]
 LDR r2,=USART_CR1_RE
 ORRS r1,r1,r2
 STR r1,[r0]
;Enabling USART
 LDR r1,[r0]
 LDR r2,=USART_CR1_UE
 ORRS r1,r1,r2
 STR r1,[r0]
 POP{PC}
 ENDP
USART1_RX_AF PROC
 PUSH{LR}
 LDR r0,=GPIOB_BASE
 LDR r1,[r0, #GPIO_MODER]
 LDR r2,=GPIO_MODER_MODE7 ;3<<2*7
 BICS r1,r1,r2
 LDR r2,=GPIO_MODER_MODE7_1
 ORRS r1,r1,r2
 STR r1,[r0,#GPIO_MODER]
 LDR r1,[r0,#GPIO_AFRL]
 LDR r2,=GPIO_AFRL_AFSEL7
 BICS r1,r1,r2
 STR r1,[r0,#GPIO_AFRL]  
 POP{PC}
 ENDP

GPIOA12_Config PROC
 PUSH{LR}
 LDR r0, =GPIOA_BASE
 LDR r1, [r0, #GPIO_MODER]
 LDR r2, =GPIO_MODER_MODE12 ;3<<2*12
 BICS r1, r1, r2
 LDR r2, =GPIO_MODER_MODE12_0   ;1<<2*12
 ORRS r1, r1, r2
 STR r1, [r0, #GPIO_MODER]
 POP{PC}
 ENDP
 ALIGN 4
 END
